package ru.aston.homework.hw1;

import java.util.Comparator;

public interface RuList<E> {
    /**
     * Добавление элемента в конец списка.
     * Если размер списка равен кол-ву данных size - это означает, что он заполнен и тогда
     * список увеличивается методом grow().
     *
     * @param e - добавляемый элемент
     * @return true возвращается после добавление элемента.
     */
    boolean add(E e);

    /**
     * Добавление элемента в определённое место списка.
     * Перед добавлением через метод checkIndex() производится проверка номера позиции,
     * на которую будет добавлен элемент.
     *
     * @param e   - добавляемый элемент
     * @param pos - позиция в массиве, на которую будет добавлен элемент
     * @return true возвращается после добавление элемента.
     * @throws IndexOutOfBoundsException - в случае если индекс за пределами массива.
     */
    boolean add(E e, int pos);

    /**
     * Замена элемента по индексу.
     * Перед добавлением через метод checkIndex() производится проверка индекса,
     * на которую будет добавлен элемент.
     *
     * @param e     - новый элемент
     * @param index - позиция в массиве, на которую будет добавлен элемент
     * @return возвращается значение, которое было в этом месте до замены.
     * @throws IndexOutOfBoundsException - в случае если индекс за пределами массива.
     */
    E set(E e, int index);

    /**
     * Получение элемента по индексу
     *
     * @param index - индекс элемента, который
     * @return - возвращается содержимое соответствующей ячейки
     * @throws IndexOutOfBoundsException - в случае если индекс за пределами массива.
     */
    E get(int index);

    /**
     * Метод возвращает массив элементов значения которого равны значениям текущего ruArrayList
     *
     * @param arr - массив, который нужно заполнить значениями текущего ruArrayList
     * @return массив элементов
     * @throws ArrayStoreException  если тип данных arr не является супертипом для типа параметров текущего ruArrayList
     * @throws NullPointerException если переданный в метод массив равен null
     */
    <T> T[] toArray(T[] arr);

    /**
     * Метод возвращает число записей имеющихся в массиве. (Не путать с размером внутреннего массива).
     *
     * @return - число записей в листе.
     */
    int getSize();

    /**
     * Удаление элемента из листа по индексу. Элемент удаляется из массива вместе с полем, в котором он был.
     * Массив при этом схлопывается на одну ячейку.
     *
     * @param index - индекс элемента, который должен быть удалён из листа.
     * @return метод возвращает удалённых элемент.
     * @throws IndexOutOfBoundsException - в случае если индекс за пределами массива.
     */
    E remove(int index);

    /**
     * Очистка листа. Лист заполняется null значениями.
     */
    void clear();

    /**
     * Метод сортировки листа стандартным способом Arrays.sort
     *
     * @param comparator - компаратор для определения правил сортировки.
     */
    void sort(Comparator<E> comparator);

    /**
     * Метод предназначенный для оформления массива для перевода в строку.
     *
     * @return - строковое представление данных массива.
     */
    @Override
    String toString();
}
